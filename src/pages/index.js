import Head from 'next/head';
import { Flex, Text } from '@chakra-ui/react';
import PokeHeader from '../components/PokeHeader';
import PokeCard from '../components/PokeCard';
import { LIST, ITEM_PER_PAGE } from '../constants/index';
import { useState } from 'react';
import axios from 'axios';
import ReactPaginate from 'react-paginate';

export default function Home() {
	const [search, setSearch] = useState('');
	const [pokemonDetail, setPokemonDetail] = useState(null);
	const [isDetailOpen, setIsDetailOpen] = useState(false);
	const [itemOffset, setItemOffset] = useState(0);
	const endOffset = itemOffset + ITEM_PER_PAGE;

	const onOpenDetail = (url) => {
		axios.get(url).then((res) => {
			const detail = res?.data ?? null;

			if (detail) {
				setPokemonDetail(detail);
				setIsDetailOpen(true);
			} else {
				alert('Failed to fetch');
			}
		});
	};

	const closeDetail = () => {
		setIsDetailOpen(false);
	};

	const onSetSearch = (value) => {
		navigate({ selected: 0 });
		setSearch(value);
	};

	const filteredPokemon = search
		? LIST.filter(
				(monster) =>
					monster.name.toLowerCase().indexOf(search.toLowerCase()) > -1
		  )
		: LIST;

	const currentItems = filteredPokemon.slice(itemOffset, endOffset);
	const pageCount = Math.ceil(filteredPokemon.length / ITEM_PER_PAGE);

	const navigate = (data) => {
		const newOffset = (data.selected * ITEM_PER_PAGE) % filteredPokemon.length;
		setItemOffset(newOffset);
	};

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Flex as="section" flexDirection="column" padding="20px">
				<PokeHeader onSearch={onSetSearch}></PokeHeader>
				<Flex as="section" mt="24px" flexWrap="wrap">
					{currentItems.length
						? currentItems.map((data, index) => (
								<PokeCard
									key={index}
									name={data.name}
									url={data.url}
									index={index + 1}
									onOpenDetail={onOpenDetail}
								></PokeCard>
						  ))
						: 'No result'}
				</Flex>
				{filteredPokemon.length ? (
					<ReactPaginate
						pageCount={pageCount}
						marginPagesDisplayed={2}
						pageRangeDisplayed={1}
						onPageChange={navigate}
						containerClassName={'pagination'}
						activeClassName={'active'}
					/>
				) : null}
				{isDetailOpen ? (
					<Flex
						position="fixed"
						zIndex={1}
						bg="rgba(0, 0, 0, 0.5)"
						top="0"
						left="0"
						right="0"
						bottom="0"
						alignItems="center"
						justifyContent="center"
						onClick={closeDetail}
					>
						<Flex
							width="400px"
							height="400px"
							bg="white"
							border="1px solid red"
							borderRadius="16px"
							overflow="hidden"
						>
							<Flex
								pt="20px"
								w="50%"
								bg="green"
								flexDirection="column"
								alignItems="center"
								color="white"
							>
								<Text>{pokemonDetail.name}</Text>
								<Flex
									w="30px"
									h="30px"
									border="1px solid white"
									mt="20px"
								></Flex>
								{pokemonDetail.types.length ? (
									<Flex flexDirection="column" mt="12px" alignItems="center">
										<Text>Type</Text>
										<Flex>
											{pokemonDetail.types.map((type, index) => (
												<Text key={`${type.type.name}-${index}`}>
													{type.type.name}
												</Text>
											))}
										</Flex>
									</Flex>
								) : null}
								{pokemonDetail.abilities.length ? (
									<Flex flexDirection="column" mt="12px" alignItems="center">
										<Text>Special abilities</Text>
										<Flex>
											{pokemonDetail.abilities.map((ability, index) => (
												<Text key={`${ability.ability.name}-${index}`}>
													{ability.ability.name}
												</Text>
											))}
										</Flex>
									</Flex>
								) : null}
							</Flex>
							<Flex
								pt="20px"
								w="50%"
								bg="white"
								flexDirection="column"
								alignItems="center"
							>
								{pokemonDetail.stats.length ? (
									<Flex flexDirection="column">
										<Text>Base Stats</Text>
										{pokemonDetail.stats.map((stat, index) => (
											<Flex flexDirection="column" key={`stat-${index}`}>
												<Text>
													{stat.stat.name} {stat.base_stat}
												</Text>
												<Flex
													position="relative"
													w="100px"
													bg="gray"
													h="10px"
													borderRadius="4px"
													overflow="hidden"
												>
													<Flex
														w={`${stat.base_stat}px`}
														h="100%"
														bg="green"
														position="absolute"
														top="0"
														left="0"
													></Flex>
												</Flex>
											</Flex>
										))}
									</Flex>
								) : null}
							</Flex>
						</Flex>
					</Flex>
				) : null}
			</Flex>
		</>
	);
}
